{"version":3,"sources":["generated/graphql.tsx","components/Button.tsx","components/PlaceCard.tsx","helpers/NumberOperations.ts","views/Vylety.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultOptions","gql","PlacesDocument","Button","onClick","text","className","PlaceCard","placeName","imgSrc","description","alt","src","width","generateRandomNumber","max","Math","floor","random","Vylety","num","data","useState","placeId","setPlaceId","numberToCompare","generatedNumber","generateNonRepeatingNumber","size","get","name","App","baseOptions","options","Apollo","usePlacesQuery","loading","error","storedData","Map","places","map","place","index","set","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8LAMMA,G,MAAkB,IAsDWC,YAAH,sKAsCzB,IAAMC,EAAiBD,YAAH,uH,0BC1FdE,EAAgC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC7D,OACE,wBACEF,QAASA,EACTE,UAAS,6CAAwCA,GAFnD,SAIGD,K,QCLME,EAAsC,SAAC,GAI7C,IAHLC,EAGI,EAHJA,UACAC,EAEI,EAFJA,OACAC,EACI,EADJA,YAEA,OACE,sBAAKJ,UAAU,+DAAf,UAEE,iCACE,oBAAIA,UAAU,8CAAd,SACGE,MAKL,mCAEE,cAAC,gBAAD,CACEG,IAAI,YACJC,IAAKH,EACLI,MAAM,QAGR,4BAAYP,UAAU,OAAtB,SAA8BI,WC3BzBI,EAAuB,SAACC,GACnC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,ICQvBI,EAAgC,SAAC,GAAc,IDiBhCC,ECjBoBC,EAAW,EAAXA,KAAW,EAE3BC,oBAAU,GAFiB,mBAElDC,EAFkD,KAEzCC,EAFyC,KAIzD,OACE,sBAAKlB,UAAU,qDAAf,UACE,qBAAKM,IAAI,qBAAqBD,IAAI,YAAYE,MAAM,QACpD,cAAC,EAAD,CACEP,UAAU,8CACVF,QAAS,kBAEPoB,EDVgC,SACxCC,EACAV,GAGA,IADA,IAAIW,EAAkBZ,EAAqBC,GACpCW,IAAoBD,GACzBC,EAAkBZ,EAAqBC,GAEzC,OAAOW,ECEYC,CAA2BJ,EAASF,EAAKO,QAEtDvB,KAAK,wBDIee,ECATG,EDCbH,GAAO,ECEL,cAAC,EAAD,CACEZ,UAAWa,EAAKQ,IAAIN,GAAUO,KAC9BrB,OAAQY,EAAKQ,IAAIN,GAAUd,OAC3BC,YAAaW,EAAKQ,IAAIN,GAAUb,cALlC,2DCHOqB,MA1Bf,WAAe,MLyHR,SAAwBC,GACvB,IAAMC,EAAO,2BAAOjC,GAAmBgC,GACvC,OAAOE,IAAmDhC,EAAgB+B,GKzH/CE,GAAzBd,EAFK,EAELA,KAAMe,EAFD,EAECA,QAASC,EAFV,EAEUA,MAEnBC,EAAa,IAAIC,IAErB,OAAIH,EAEA,qBAAK9B,UAAU,2DAAf,SACE,qBACEM,IAAI,sBACJD,IAAI,eACJE,MAAM,MACNP,UAAU,mBAIT+B,IAAUhB,EAAa,oDAE3Be,GAAYC,GACfhB,EAAKmB,OAAOC,KAAI,SAACC,EAAOC,GAAR,OAAkBL,EAAWM,IAAID,EAAOD,MAInD,cAAC,EAAD,CAAQrB,KAAMiB,MCbRO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCERQ,EAAW,IAAIC,IAAS,CAC5BC,IAAK,kCAGDC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAMP,IAGRQ,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.9b229c40.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Place = {\n  __typename?: 'Place';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n  imgSrc: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  places: Array<Place>;\n  singlePlace: Place;\n};\n\n\nexport type QuerySinglePlaceArgs = {\n  placeId: Scalars['Float'];\n};\n\nexport type SinglePlaceQueryVariables = Exact<{\n  placeId: Scalars['Float'];\n}>;\n\n\nexport type SinglePlaceQuery = (\n  { __typename?: 'Query' }\n  & { singlePlace: (\n    { __typename?: 'Place' }\n    & Pick<Place, 'id' | 'name' | 'imgSrc' | 'description'>\n  ) }\n);\n\nexport type PlacesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PlacesQuery = (\n  { __typename?: 'Query' }\n  & { places: Array<(\n    { __typename?: 'Place' }\n    & Pick<Place, 'id' | 'name' | 'imgSrc' | 'description'>\n  )> }\n);\n\n\nexport const SinglePlaceDocument = gql`\n    query SinglePlace($placeId: Float!) {\n  singlePlace(placeId: $placeId) {\n    id\n    name\n    imgSrc\n    description\n  }\n}\n    `;\n\n/**\n * __useSinglePlaceQuery__\n *\n * To run a query within a React component, call `useSinglePlaceQuery` and pass it any options that fit your needs.\n * When your component renders, `useSinglePlaceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSinglePlaceQuery({\n *   variables: {\n *      placeId: // value for 'placeId'\n *   },\n * });\n */\nexport function useSinglePlaceQuery(baseOptions: Apollo.QueryHookOptions<SinglePlaceQuery, SinglePlaceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SinglePlaceQuery, SinglePlaceQueryVariables>(SinglePlaceDocument, options);\n      }\nexport function useSinglePlaceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SinglePlaceQuery, SinglePlaceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SinglePlaceQuery, SinglePlaceQueryVariables>(SinglePlaceDocument, options);\n        }\nexport type SinglePlaceQueryHookResult = ReturnType<typeof useSinglePlaceQuery>;\nexport type SinglePlaceLazyQueryHookResult = ReturnType<typeof useSinglePlaceLazyQuery>;\nexport type SinglePlaceQueryResult = Apollo.QueryResult<SinglePlaceQuery, SinglePlaceQueryVariables>;\nexport const PlacesDocument = gql`\n    query Places {\n  places {\n    id\n    name\n    imgSrc\n    description\n  }\n}\n    `;\n\n/**\n * __usePlacesQuery__\n *\n * To run a query within a React component, call `usePlacesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePlacesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePlacesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePlacesQuery(baseOptions?: Apollo.QueryHookOptions<PlacesQuery, PlacesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PlacesQuery, PlacesQueryVariables>(PlacesDocument, options);\n      }\nexport function usePlacesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PlacesQuery, PlacesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PlacesQuery, PlacesQueryVariables>(PlacesDocument, options);\n        }\nexport type PlacesQueryHookResult = ReturnType<typeof usePlacesQuery>;\nexport type PlacesLazyQueryHookResult = ReturnType<typeof usePlacesLazyQuery>;\nexport type PlacesQueryResult = Apollo.QueryResult<PlacesQuery, PlacesQueryVariables>;","import React from \"react\";\r\n\r\ninterface ButtonProps {\r\n  onClick: any;\r\n  text?: string;\r\n  className: string;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = ({ onClick, text, className }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`py-3 px-14 my-5 focus:outline-none ${className}`}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\n\r\ninterface PlaceCardProps {\r\n  placeName: string; // name of the place\r\n  imgSrc: string;\r\n  description: string;\r\n}\r\n\r\nexport const PlaceCard: React.FC<PlaceCardProps> = ({\r\n  placeName,\r\n  imgSrc,\r\n  description,\r\n}) => {\r\n  return (\r\n    <div className=\"bg-white flex flex-col px-5 mx-5 my-10 rounded-3xl lg:w-2/6 \">\r\n      {/* place header */}\r\n      <header>\r\n        <h1 className=\"text-gray-800 text-2xl self-start py-3 px-1\">\r\n          {placeName}\r\n        </h1>\r\n      </header>\r\n      {/* place info */}\r\n      {/* <pre>{data.singlePlace.id}</pre> */}\r\n      <figure>\r\n        {/* place img */}\r\n        <LazyLoadImage\r\n          alt=\"place-img\"\r\n          src={imgSrc} // use normal <img> attributes as props\r\n          width=\"500\"\r\n        />\r\n        {/* <img src={imgSrc} alt=\"test-img\" /> */}\r\n        <figcaption className=\"py-3\">{description}</figcaption>\r\n      </figure>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * Function that generates random number\r\n * @param max max value\r\n * @return random value\r\n */\r\nexport const generateRandomNumber = (max: number) => {\r\n  return Math.floor(Math.random() * max);\r\n};\r\n\r\n/**\r\n * Function that will generate non-repeating number\r\n * @param numberToCompare unwanted number to be repeated\r\n * @param max max value\r\n * @return random non-repeating number\r\n */\r\nexport const generateNonRepeatingNumber = (\r\n  numberToCompare: number,\r\n  max: number\r\n) => {\r\n  let generatedNumber = generateRandomNumber(max);\r\n  while (generatedNumber === numberToCompare) {\r\n    generatedNumber = generateRandomNumber(max);\r\n  }\r\n  return generatedNumber;\r\n};\r\n\r\n/**\r\n * Function that checks if a numeric value is zero (placeId in our case)\r\n * @param num numeric value to check (id)\r\n * @returns boolean\r\n */\r\nexport const notNegative = (num: number) => {\r\n  if (num > -1) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"../components/Button\";\r\nimport { PlaceCard } from \"../components/PlaceCard\";\r\nimport { Place } from \"../generated/graphql\";\r\nimport {\r\n  generateNonRepeatingNumber,\r\n  notNegative,\r\n} from \"../helpers/NumberOperations\";\r\n\r\ninterface VyletyProps {\r\n  // data structure to store the fetched data\r\n  data: Map<number, Place>;\r\n}\r\n\r\nexport const Vylety: React.FC<VyletyProps> = ({ data }) => {\r\n  // placeId to pass to the placeCard\r\n  const [placeId, setPlaceId] = useState(-1); // on load negative = not valid index\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center bg-red-400\">\r\n      <img src=\"/assets/Header.svg\" alt=\"Page logo\" width=\"400\" />\r\n      <Button\r\n        className=\"bg-green-600 text-white rounded-3xl text-lg\"\r\n        onClick={() =>\r\n          // sets the placeId to the random number, max number = size of the data map\r\n          setPlaceId(generateNonRepeatingNumber(placeId, data.size))\r\n        }\r\n        text=\"Najdi si výlet!\"\r\n      />\r\n      {/* <Button onClick={() => setPlaceId(-1)} text=\"Vymazat\" /> */}\r\n      {/* if the placeId is negative empty return */}\r\n      {notNegative(placeId) ? (\r\n        <div>press the button :o</div>\r\n      ) : (\r\n        <PlaceCard\r\n          placeName={data.get(placeId)!.name}\r\n          imgSrc={data.get(placeId)!.imgSrc}\r\n          description={data.get(placeId)!.description}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Place, usePlacesQuery } from \"./generated/graphql\";\nimport { Vylety } from \"./views/Vylety\";\n\nfunction App() {\n  // this fetches the data from the db\n  const { data, loading, error } = usePlacesQuery();\n  // storing fetched data into memory using hashMap\n  let storedData = new Map<number, Place>();\n  // loading animation\n  if (loading)\n    return (\n      <div className=\"min-h-screen bg-red-400 flex justify-center items-center\">\n        <img\n          src=\"/assets/loading.svg\"\n          alt=\"loading-icon\"\n          width=\"100\"\n          className=\"animate-spin\"\n        />\n      </div>\n    );\n  else if (error || !data) return <h1>error has occured</h1>;\n\n  if (!loading && !error) {\n    data.places.map((place, index) => storedData.set(index, place));\n  }\n\n  // returning Vylety component containing our hashMap with the data\n  return <Vylety data={storedData} />;\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}